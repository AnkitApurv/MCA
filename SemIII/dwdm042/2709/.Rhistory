x <- c(2,4,6,8,1,3,5,7)
boxplot(x)
iris <- read.csv("F:/ProjectsWorking/dwdm042/1110/iris.csv")
View(iris)
irisCl <- iris[-5]
clusterCenters <- matrix(iris[row(iris) == 1 | row(iris) == 51 | row(iris) == 101], nrow = 3, ncol = 4)
kMeansCluster <- kmeans(irisCl, clusterCenters)
clusterCenters <- matrix(irisCl[row(irisCl) == 1 | row(irisCl) == 51 | row(irisCl) == 101], nrow = 3, ncol = 4)
kMeansCluster <- kmeans(irisCl, clusterCenters)
View(kMeansCluster)
testDatasetSize <- floor(nrow(iris) * 0.3)
#set.seed(integer) #to ensure non-random, reproducible output from sample
irisTestIndices <- sample(1:nrow(iris), testDatasetSize, replace = FALSE)
irisTest <- iris[irisTestIndices,]
irisTrain <- iris[-irisTestIndices,]
#4 use 'knn' for classification on 'iris' dataset, compute accuracy for each class
#knn
classInfoForTrain <- factor(iris[-irisTestIndices, "class"])
knnk <- 3
irisClassification <- knn(irisTrain, irisTest, classInfoForTrain, knnk)
#confusion matrix
irisTestVerifyFactor <- factor(iris[irisTestIndices, "class"])
expected <- table(irisTestVerifyFactor)
observed <- table(irisClassification)
library(class)
testDatasetSize <- floor(nrow(iris) * 0.3)
#set.seed(integer) #to ensure non-random, reproducible output from sample
irisTestIndices <- sample(1:nrow(iris), testDatasetSize, replace = FALSE)
irisTest <- iris[irisTestIndices,]
irisTrain <- iris[-irisTestIndices,]
#4 use 'knn' for classification on 'iris' dataset, compute accuracy for each class
#knn
classInfoForTrain <- factor(iris[-irisTestIndices, "class"])
knnk <- 3
irisClassification <- knn(irisTrain, irisTest, classInfoForTrain, knnk)
#confusion matrix
irisTestVerifyFactor <- factor(iris[irisTestIndices, "class"])
expected <- table(irisTestVerifyFactor)
observed <- table(irisClassification)
testDatasetSize <- floor(nrow(iris) * 0.3)
#set.seed(integer) #to ensure non-random, reproducible output from sample
irisTestIndices <- sample(1:nrow(iris), testDatasetSize, replace = FALSE)
irisTest <- iris[irisTestIndices,]
irisTrain <- iris[-irisTestIndices,]
#4 use 'knn' for classification on 'iris' dataset, compute accuracy for each class
#knn
classInfoForTrain <- factor(iris[-irisTestIndices, "class"])
knnk <- 3
irisClassification <- class:knn(irisTrain, irisTest, classInfoForTrain, knnk)
#confusion matrix
irisTestVerifyFactor <- factor(iris[irisTestIndices, "class"])
expected <- table(irisTestVerifyFactor)
observed <- table(irisClassification)
iris <- read.csv("~/iris.csv")
testDatasetSize <- floor(nrow(iris) * 0.3)
#set.seed(integer) #to ensure non-random, reproducible output from sample
irisTestIndices <- sample(1:nrow(iris), testDatasetSize, replace = FALSE)
irisTest <- iris[irisTestIndices,]
irisTrain <- iris[-irisTestIndices,]
testDatasetSize <- floor(nrow(iris) * 0.3)
#set.seed(integer) #to ensure non-random, reproducible output from sample
irisTestIndices <- sample(1:nrow(iris), testDatasetSize, replace = FALSE)
irisTest <- iris[irisTestIndices,]
irisTrain <- iris[-irisTestIndices,]
classInfoForTrain <- factor(iris[-irisTestIndices, "class"])
knnk <- 3
irisClassification <- class:knn(irisTrain, irisTest, classInfoForTrain, knnk)
irisTrain <- irisTrain[-"class"]
irisTest <- irisTest[-"class"]
irisTrain <- irisTrain[-5]#5 th column is class
irisTest <- irisTest[-5]
irisClassification <- class:knn(irisTrain, irisTest, classInfoForTrain, knnk)
classInfoForTrain <- factor(irisTrain["class"])
classInfoForTrain <- factor(iris[-irisTestIndices, "class"])
irisClassification <- knn(irisTrain, irisTest, classInfoForTrain, knnk)
irisTestVerifyFactor <- factor(iris[irisTestIndices, "class"])
expected <- table(irisTestVerifyFactor)
observed <- table(irisClassification)
observed
expected
library(caret)
import(caret)
install.packages("caret")
import(caret)
library(caret)
confusionMatrix(observed, expected)
confusionMatrix(table(observed), table(expected))
install.packages("e1071")
library(caret)
confusionMatrix(table(observed), table(expected))
confusionMatrix(observed, expected)
for(i in 1:nrow(observed)) {
truePositive <- observed[i] - abs(observed[i] - expected[i])
falsePositive <- observed[i] - truePositive
trueNegative <- testDatasetSize - observed[i]
falseNegative <- (testDatasetSize - observed[i]) - trueNegative
sensetivity <- truePositive / expected[i]
specificity <- trueNegative / (testDatasetSize - observed[i])
accuracy <- (truePositive + trueNegative) / testDatasetSize
print(accuracy)
}
irisCl <- iris[-5]
clusterCenters <- matrix(irisCl[row(irisCl) == 1 | row(irisCl) == 51 | row(irisCl) == 101], nrow = 3, ncol = 4)
kMeansCluster <- kmeans(irisCl, clusterCenters)
View(kMeansCluster)
kMeansCluster <- kmeans(irisCl, centers = 3)
View(kMeansCluster)
kMeansCluster <- kmeans(irisCl, centers = 3)
View(kMeansCluster)
kMeansCluster <- kmeans(irisCl, centers = 3)
View(kMeansCluster)
ggplot(iris, mapping = aes(iris$sepallength, iris$sepalwidth, iris$petallength, iris$petalwidth))
View(iris)
ggplot(iris, mapping = aes(iris$petallength, iris$sepallength, color = cluster))
ggplot(iris, mapping = aes(iris$petallength, iris$sepallength))
clusterFactor <- factor(kMeansCluster$cluster)
iris$cluster <- clusterFactor
View(iris)
ggplot(iris, mapping = aes(iris$petallength, iris$sepallength))
plot(iris$petallength, iris$sepallength)
plot(iris$petallength, iris$sepalwidth)
plot(iris$petallength, iris$petalwidth)
plot(iris$petallength, iris$sepallength)
install.packages("rgl")
library(rgl)
plot3d(iris$petallength, iris$sepallength, iris$sepalwidth)
View(kMeansCluster)
kMeansCluster
iris <- iris[-6]
qplot(petallength, petalwidth, sepallength, sepalwidth, data = iris)
qplot(iris$petallength, iris$petalwidth, iris$sepallength, iris$sepalwidth, data = iris)
qplot(aes(iris$petallength, iris$petalwidth, iris$sepallength, iris$sepalwidth), data = iris)
qplot(aes(petallength, petalwidth, sepallength, sepalwidth), data = iris)
qplot(petallength, petalwidth)
qplot(iris$petallength, iris$petalwidth)
qplot(iris$petallength, iris$petalwidth, iris$sepallength, iris$sepalwidth)
xtabs(mtcars$mpg ~ mtcars$gear) / table(mtcars$gear)
view("iris3")
view(iris3)
qplot(iris$petallength, iris$petalwidth)
library(ggplot2)
qplot(iris$petallength, iris$petalwidth)
iris <- read.csv("F:/ProjectsWorking/dwdm042/1110/iris.csv")
View(iris)
qplot(iris$petallength, iris$petalwidth)
qplot(iris$petallength, iris$sepallength)
qplot(iris$petallength, iris$sepalwidth)
qplot(iris$sepallength, iris$sepalwidth)
qplot(iris$sepallength, iris$petallength)
qplot(iris$sepallength, iris$petalwidth)
qplot(iris$sepallength, iris$petalwidth, iris3, geom = c("points", "circle"))
qplot(iris$sepallength, iris$petalwidth, iris3, geom = c("points"))
qplot(iris$sepallength, iris$petalwidth, iris3, geom = c("dotplot"))
qplot(aes(iris$sepallength~iris$sepalwidth, iris$petallength~iris$petalwidth, iris3, geom = c("dotplot"))
geom_point(aes(color=Species, shape=Species)) +
xlab("Sepal Length") +  ylab("Sepal Width") +
ggtitle("Sepal Length-Width")
scatter <- ggplot(data=iris, aes(x = Sepal.Length, y = Sepal.Width))
scatter + geom_point(aes(color=Species, shape=Species)) +
xlab("Sepal Length") +  ylab("Sepal Width") +
ggtitle("Sepal Length-Width")
scatter <- ggplot(data=iris3, aes(x = Sepal.Length, y = Sepal.Width))
scatter + geom_point(aes(color=Species, shape=Species)) +
xlab("Sepal Length") +  ylab("Sepal Width") +
ggtitle("Sepal Length-Width")
View(iris3)
scatter <- ggplot(data=iris3, aes(x = Sepal.Length, y = Sepal.Width))
scatter + geom_point(aes(color="Species", shape="Species")) +
xlab("Sepal Length") +  ylab("Sepal Width") +
ggtitle("Sepal Length-Width")
scatter <- ggplot(data=iris, aes(x = sepallength, y = sepalwidth))
scatter + geom_point(aes(color="Species", shape="Species")) +
xlab("Sepal Length") +  ylab("Sepal Width") +
ggtitle("Sepal Length-Width")
setwd("F:/ProjectsWorking/dwdm042/2709")
tT <- read.transactions("train.csv", sep = ",", format = "basket", rm.duplicates = FALSE, header = TRUE, cols = 1)
library(arules)
install.packages("arules")
install.packages("arulesViz")
library(arules)
tT <- read.transactions("train.csv", sep = ",", format = "basket", rm.duplicates = FALSE, header = TRUE, cols = 1)
rules <- apriori(tT, parameter = list(target = "rules",maxlen = 11), appearance = list(rhs = c("Survived=0", "Survived=1"), none = c("PassengerId")))
rules <- apriori(tT, parameter = list(target = "rules",maxlen = 11), appearance = list(rhs = c("0", "1"), none = c("PassengerId")))
rules <- apriori(tT, parameter = list(target = "rules",maxlen = 11), appearance = list(rhs = c("0", "1")))
View(rules)
View(tT)
