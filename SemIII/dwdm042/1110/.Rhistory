any(is.na(train$Age)) #TRUE, FALSE for the rest of the attribute
#keeping age as is to avoid change in this small dataset
tT <- read.transactions("train.csv", sep = ",", format = "basket", rm.duplicates = FALSE, header = TRUE, cols = 1)
rules <- apriori(tT, parameter = list(target = "rules",maxlen = 11), appearance = list(rhs = c("Survived=0", "Survived=1"), none = c("PassengerId")))
mtcars
boxplot(mtcars)
boxplot(mtcars$cyl)
boxplot(mtcars)
iris <- read.table("D:/iris.csv", quote="\"", comment.char="")
View(iris)
iris <- read.table("D:/iris.csv", quote="\"", comment.char="")
View(iris)
iris <- read.table("D:/iris.csv", quote="\"", comment.char="")
View(iris)
mtcars
idx(mtcars)
idx(mtcars$mpg)
rownames(mtcars$mpg)
row(mtcars$cyl)
row(mtcars$cyl)
row(mtcars)
col(mtcars$hp)
library(class)
setwd("D:/dwdm042/1110")
corviz <- function(x, y) {
if(is.null(x) | is.null(y)) {
x <- c(90, 100, 130, 150, 180, 200, 220, 300, 350, 400)
y <- c(25, 28, 20, 20, 15, 12, 13, 10, 8, 6)
}
result <- chisq.test(x, y)
plot(x, y, type="p")
print(result)
}
corviz(x,y)
x
x <- NULL
y <- NULL
corviz(x,y)
??knn
??knn
?knn
x <- 1:12
# a random permutation
sample(x)
# bootstrap resampling -- only if length(x) > 1 !
sample(x, replace = TRUE)
x[x == 12]
irisTest <- sample(iris, size(iris) * 0.7)
irisTest <- sample(iris, length(iris) * 0.7)
irisTest
sample(x[x > 8])
sample(x[x > 11])
sample(x[x > 12])
irisTest <- resample(iris, length(iris) * 0.3)
irisTest <- sample(iris, length(iris) * 0.3)
irisTest
irisTest <- sample(iris, length(iris) * 0.7)
irisTest
irisTest <- sample(iris, length(iris))
irisTest
iris
irisTest <- split(iris, length(iris) * 0.7)
irisTest
View(irisTest)
irisTest <- read.csv("D:/dwdm042/1110/irisTest.csv")
View(irisTest)
knn(iris, irisTest, 1, 3)
cl <- factor(c(rep("setosa", 50), rep("versicolor", 50), rep("virginica", 50)))
knn(iris, irisTest, cl, 3)
cl <- factor(c(rep("setosa", 50), rep("versicolor", 50), rep("virginica", 50)))
knn(iris, irisTest, NULL, 3)
corviz <- function(x, y) {
if(is.null(x) | is.null(y)) {
x <- c(90, 100, 130, 150, 180, 200, 220, 300, 350, 400)
y <- c(25, 28, 20, 20, 15, 12, 13, 10, 8, 6)
}
result <- chisq.test(x, y)
plot(x, y, type="p")
print(result[["p"]])
}
x <- NULL
corviz(x, y)
x <- c(90, 100, 130, 150, 180, 200, 220, 300, 350, 400)
y <- c(25, 28, 20, 20, 15, 12, 13, 10, 8, 6)
result <- chisq.test(x, y)
result$p.value
corviz <- function(x, y) {
if(is.null(x) | is.null(y)) {
x <- c(90, 100, 130, 150, 180, 200, 220, 300, 350, 400)
y <- c(25, 28, 20, 20, 15, 12, 13, 10, 8, 6)
}
result <- chisq.test(x, y)
plot(x, y, type="p")
print(result$p.value)
}
corviz(x,y)
library("compiler", lib.loc="C:/Program Files/R/R-3.4.1/library")
cl <- factor(c(rep("setosa", 50), rep("versicolor", 50), rep("virginica", 50)))
knn(iris, irisTest, cl, 3)
cl <- factor(c(rep("setosa", 50), rep("versicolor", 50), rep("virginica", 50)))
knn(iris, irisTest, cl, k = 3, prob = TRUE)
corviz <- function(x, y) {
if(is.null(x) | is.null(y)) {
x <- c(90, 100, 130, 150, 180, 200, 220, 300, 350, 400)
y <- c(25, 28, 20, 20, 15, 12, 13, 10, 8, 6)
}
result <- chisq.test(x, y)
plot(x, y, type="p")
print(result$p.value)
}
x <- NULL
y <- NULL
corviz(x,y)
corviz <- function(x, y) {
if(is.null(x) | is.null(y)) {
x <- c(90, 100, 130, 150, 180, 200, 220, 300, 350, 400)
y <- c(25, 28, 20, 20, 15, 12, 13, 10, 8, 6)
}
result <- chisq.test(x, y)
plot(x, y, type="p")
print(result$p.value)
switch (result$p.value,
(result$p.value == -1) = print("Perfect -ve relation.")
(result$p.value < -1 & result$p.value >= -0.7) = print("Strong -ve relation.")
(result$p.value < -0.7 & result$p.value >= -0.5) = print("Moderate -ve relation.")
(result$p.value < -0.5 & result$p.value >= -0.3) = print("Weak -ve relation.")
(result$p.value < -0.3 & result$p.value > 0) = print("Slight -ve relation.")
(result$p.value == 0) = print("No relation.")
(result$p.value < 0.3 & result$p.value > 0) = print("Slight +ve relation.")
(result$p.value < 0.5 & result$p.value >= 0.3) = print("Weak +ve relation.")
(result$p.value < 0.7 & result$p.value >= 0.5) = print("Moderate -ve relation.")
(result$p.value < 1 & result$p.value >= 0.7) = print("Strong +ve relation.")
(result$p.value == 1) = print("Perfect +ve relation.")
)
}
corviz <- function(x, y) {
if(is.null(x) | is.null(y)) {
x <- c(90, 100, 130, 150, 180, 200, 220, 300, 350, 400)
y <- c(25, 28, 20, 20, 15, 12, 13, 10, 8, 6)
}
result <- chisq.test(x, y)
plot(x, y, type="p")
print(result$p.value)
#switch (result$p.value,
#    (result$p.value == -1) = print("Perfect -ve relation.")
#    (result$p.value < -1 & result$p.value >= -0.7) = print("Strong -ve relation.")
#    (result$p.value < -0.7 & result$p.value >= -0.5) = print("Moderate -ve relation.")
#    (result$p.value < -0.5 & result$p.value >= -0.3) = print("Weak -ve relation.")
#    (result$p.value < -0.3 & result$p.value > 0) = print("Slight -ve relation.")
#    (result$p.value == 0) = print("No relation.")
#    (result$p.value < 0.3 & result$p.value > 0) = print("Slight +ve relation.")
#    (result$p.value < 0.5 & result$p.value >= 0.3) = print("Weak +ve relation.")
#    (result$p.value < 0.7 & result$p.value >= 0.5) = print("Moderate -ve relation.")
#    (result$p.value < 1 & result$p.value >= 0.7) = print("Strong +ve relation.")
#    (result$p.value == 1) = print("Perfect +ve relation.")
#)
}
corviz(x,y)
corviz <- function(x, y) {
if(is.null(x) | is.null(y)) {
x <- c(90, 100, 130, 150, 180, 200, 220, 300, 350, 400)
y <- c(25, 28, 20, 20, 15, 12, 13, 10, 8, 6)
}
result <- cor.test(x, y)
plot(x, y, type="p")
print(result$p.value)
#switch (result$p.value,
#    (result$p.value == -1) = print("Perfect -ve relation.")
#    (result$p.value < -1 & result$p.value >= -0.7) = print("Strong -ve relation.")
#    (result$p.value < -0.7 & result$p.value >= -0.5) = print("Moderate -ve relation.")
#    (result$p.value < -0.5 & result$p.value >= -0.3) = print("Weak -ve relation.")
#    (result$p.value < -0.3 & result$p.value > 0) = print("Slight -ve relation.")
#    (result$p.value == 0) = print("No relation.")
#    (result$p.value < 0.3 & result$p.value > 0) = print("Slight +ve relation.")
#    (result$p.value < 0.5 & result$p.value >= 0.3) = print("Weak +ve relation.")
#    (result$p.value < 0.7 & result$p.value >= 0.5) = print("Moderate -ve relation.")
#    (result$p.value < 1 & result$p.value >= 0.7) = print("Strong +ve relation.")
#    (result$p.value == 1) = print("Perfect +ve relation.")
#)
}
corviz(x,y)
corviz <- function(x, y) {
if(is.null(x) | is.null(y)) {
x <- c(90, 100, 130, 150, 180, 200, 220, 300, 350, 400)
y <- c(25, 28, 20, 20, 15, 12, 13, 10, 8, 6)
}
result <- cor.test(x, y)
plot(x, y, type="p")
print(result)
#switch (result$p.value,
#    (result$p.value == -1) = print("Perfect -ve relation.")
#    (result$p.value < -1 & result$p.value >= -0.7) = print("Strong -ve relation.")
#    (result$p.value < -0.7 & result$p.value >= -0.5) = print("Moderate -ve relation.")
#    (result$p.value < -0.5 & result$p.value >= -0.3) = print("Weak -ve relation.")
#    (result$p.value < -0.3 & result$p.value > 0) = print("Slight -ve relation.")
#    (result$p.value == 0) = print("No relation.")
#    (result$p.value < 0.3 & result$p.value > 0) = print("Slight +ve relation.")
#    (result$p.value < 0.5 & result$p.value >= 0.3) = print("Weak +ve relation.")
#    (result$p.value < 0.7 & result$p.value >= 0.5) = print("Moderate -ve relation.")
#    (result$p.value < 1 & result$p.value >= 0.7) = print("Strong +ve relation.")
#    (result$p.value == 1) = print("Perfect +ve relation.")
#)
}
corviz(x,y)
corviz <- function(x, y) {
if(is.null(x) | is.null(y)) {
x <- c(90, 100, 130, 150, 180, 200, 220, 300, 350, 400)
y <- c(25, 28, 20, 20, 15, 12, 13, 10, 8, 6)
}
result <- cor.test(x, y)
plot(x, y, type="p")
print(result$cor)
}
x <- NULL
y <- NULL
corviz(x,y)
corviz <- function(x, y) {
if(is.null(x) | is.null(y)) {
x <- c(90, 100, 130, 150, 180, 200, 220, 300, 350, 400)
y <- c(25, 28, 20, 20, 15, 12, 13, 10, 8, 6)
}
result <- cor.test(x, y)
plot(x, y, type="p")
print(result)
}
corviz(x,y)
predictByLeastSquares <- function(x, y, xi) {
relation <- lm(x~y)
yi <- predict(relation, xi)
print("Correct Prediction:" + yi)
print("")
meanX <- mean(x)
meanY <- mean(y)
b1Numerator <- 0
for (i in 1:length(x)) {
b1Numerator <- b1Numerator + ((x[i] - meanX) * (y[i] - meanY))
}
b1Denominator <- 0
for (i in x) {
b1Denominator <- b1Denominator + ((i - meanX) ^ 2)
}
b1 <- b1Numerator / b1Denominator
b0 <- meanY - (b1 * meanX)
yi <- b0 + (b1 * xi)
return(yi)
}
x <- c(90, 100, 130, 150, 180, 200, 220, 300, 350, 400)
y <- c(25, 28, 20, 20, 15, 12, 13, 10, 8, 6)
predictByLeastSquares(x,y,420)
xi <- c(420)
predictByLeastSquares(x,y,xi)
xi <- data.frame(x = 420)
predictByLeastSquares(x,y,xi)
predictByLeastSquares <- function(x, y, xi) {
relation <- lm(x~y)
yi <- predict(relation, xi)
print("Correct Prediction:")
print(yi)
print("")
meanX <- mean(x)
meanY <- mean(y)
b1Numerator <- 0
for (i in 1:length(x)) {
b1Numerator <- b1Numerator + ((x[i] - meanX) * (y[i] - meanY))
}
b1Denominator <- 0
for (i in x) {
b1Denominator <- b1Denominator + ((i - meanX) ^ 2)
}
b1 <- b1Numerator / b1Denominator
b0 <- meanY - (b1 * meanX)
yi <- b0 + (b1 * xi)
return(yi)
}
predictByLeastSquares(x,y,xi)
predictByLeastSquares <- function(x, y, xi) {
#relation <- lm(x~y)
#yi <- predict(relation, xi)
meanX <- mean(x)
meanY <- mean(y)
b1Numerator <- 0
for (i in 1:length(x)) {
b1Numerator <- b1Numerator + ((x[i] - meanX) * (y[i] - meanY))
}
b1Denominator <- 0
for (i in x) {
b1Denominator <- b1Denominator + ((i - meanX) ^ 2)
}
b1 <- b1Numerator / b1Denominator
b0 <- meanY - (b1 * meanX)
yi <- b0 + (b1 * xi)
return(yi)
}
predictByLeastSquares(x,y,420)
library(class)
iris <- read.csv("~/iris.csv")
testDatasetSize <- floor(nrow(iris) * 0.3)
#set.seed(integer) #to ensure non-random, reproducible output from sample
irisTestIndices <- sample(1:nrow(iris), testDatasetSize, replace = FALSE)
irisTest <- iris[irisTestIndices,]
irisTrain <- iris[-irisTestIndices,]
iris <- read.csv("~/iris.csv")
setwd("F:/ProjectsWorking/dwdm042/1110")
iris <- read.csv("~/iris.csv")
testDatasetSize <- floor(nrow(iris) * 0.3)
#set.seed(integer) #to ensure non-random, reproducible output from sample
irisTestIndices <- sample(1:nrow(iris), testDatasetSize, replace = FALSE)
irisTest <- iris[irisTestIndices,]
irisTrain <- iris[-irisTestIndices,]
iris <- read.csv("~/iris.csv")
iris <- read.csv("F:/ProjectsWorking/dwdm042/1110/iris.csv")
View(iris)
cl <- factor(iris[irisTestIndices], "class")
testDatasetSize <- floor(nrow(iris) * 0.3)
#set.seed(integer) #to ensure non-random, reproducible output from sample
irisTestIndices <- sample(1:nrow(iris), testDatasetSize, replace = FALSE)
irisTest <- iris[irisTestIndices,]
irisTrain <- iris[-irisTestIndices,]
View(irisTest)
View(irisTrain)
cl <- factor(iris[irisTestIndices], "class")
cl <- factor(iris[irisTestIndices, "class"])
knnk <- 3
factorOfClassTest <- knn(irisTrain, irisTest, cl, knnk)
testDatasetSize <- floor(nrow(iris) * 0.3)
#set.seed(integer) #to ensure non-random, reproducible output from sample
irisTestIndices <- sample(1:nrow(iris), testDatasetSize, replace = FALSE)
irisTest <- iris[irisTestIndices,]
irisTrain <- iris[-irisTestIndices,]
cl <- factor(iris[irisTestIndices, "class"])
factorOfClassTest <- knn(irisTrain, irisTest, cl, knnk)
length(iristTrain)
length(irisTrain)
length(cl)
cl <- factor(iris[-irisTestIndices, "class"])
factorOfClassTest <- knn(irisTrain, irisTest, cl, knnk)
View(irisTest)
View(irisTrain)
irisClassification <- knn(irisTrain, irisTest, classInfoForTrain, knnk)
classInfoForTrain <- factor(iris[-irisTestIndices, "class"])
irisClassification <- knn(irisTrain, irisTest, classInfoForTrain, knnk)
classInfoForTrain <- factor(iris[, "class"])
irisClassification <- knn(iris, irisTest, classInfoForTrain, knnk)
irisClassification <- knn(iris, iris, classInfoForTrain, knnk)
