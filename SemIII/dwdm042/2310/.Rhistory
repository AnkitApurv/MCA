any(is.na(train$Age)) #TRUE, FALSE for the rest of the attribute
#keeping age as is to avoid change in this small dataset
tT <- read.transactions("train.csv", sep = ",", format = "basket", rm.duplicates = FALSE, header = TRUE, cols = 1)
rules <- apriori(tT, parameter = list(target = "rules",maxlen = 11), appearance = list(rhs = c("Survived=0", "Survived=1"), none = c("PassengerId")))
mtcars
boxplot(mtcars)
boxplot(mtcars$cyl)
boxplot(mtcars)
iris <- read.table("D:/iris.csv", quote="\"", comment.char="")
View(iris)
iris <- read.table("D:/iris.csv", quote="\"", comment.char="")
View(iris)
iris <- read.table("D:/iris.csv", quote="\"", comment.char="")
View(iris)
mtcars
idx(mtcars)
idx(mtcars$mpg)
rownames(mtcars$mpg)
row(mtcars$cyl)
row(mtcars$cyl)
row(mtcars)
col(mtcars$hp)
split(70,30,drop=FALSE,iris)
k
knn(train,cl,k=3,prob=FALSE,use.all=TRUE)
knn(train, test, cl, k = 3, prob=TRUE)
class::knn(train,cl,k=3,prob=TRUE)
class::knn(train=iris,cl,k=3,prob=TRUE)
class::knn(train, test, cl, k = 3, prob=TRUE)
class::knn(train=iris, test, cl, k = 3, prob=TRUE)
class::knn(train <- rbind(iris[1:25,,1], iris[1:25,,2], iris[1:25,,3]))
class::knn(train, test, cl, k = 1, l = 0, prob = FALSE, use.all = TRUE)
class::knn(train="iris", test="iris", cl, k = 1, l = 0, prob = FALSE, use.all = TRUE)
train <- rbind(iris3[1:25,,1], iris3[1:25,,2], iris3[1:25,,3])
train <- rbind(iris[1:25,,1], iris[1:25,,2], iris[1:25,,3])
class::knn(train,k=3,prob=TRUE)
train <- rbind(iris[1:25,,1], iris[1:25,,2], iris[1:25,,3])
test <- rbind(iris[26:50,,1], iris[26:50,,2], iris[26:50,,3])
class::knn(train,test,k=3,prob=TRUE)
test <- rbind(iris[26:50,,1], iris[26:50,,2], iris[26:50,,3])
train <- rbind(iris[1:25,,1], iris[1:25,,2], iris[1:25,,3])
test <- rbind(iris[26:50,,1], iris[26:50,,2], iris[26:50,,3])
cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
class::knn(train, test, cl, k = 3, prob=TRUE)
iris
cars
lm(cars)
iris<-70:30
sampl\
sample(iris,replace = TRUE)
class::knn()
boxplot(x=c(1,,2,3,.4))
boxplot(x=c(1,2,3,.4))
hist(x=c(1,2,3,.4))
setwd("D:/dwdm042/1110")
iris <- read.csv("~/iris.csv")
iris <- read.csv("D:/dwdm042/1110/iris.csv")
View(iris)
testDatasetSize <- floor(nrow(iris) * 0.3)
irisTestIndices <- sample(1:nrow(iris), testDatasetSize, replace = FALSE)
irisTest <- iris[irisTestIndices,]
irisTrain <- iris[-irisTestIndices,]
classInfoForTrain <- factor(iris[-irisTestIndices, "class"])
knnk <- 3
library(class)
library(caret)
irisClassification <- knn(irisTrain, irisTest, classInfoForTrain, knnk)
irisClassification <- knn(irisTrain, irisTest, classInfoForTrain, knnk, l=0 prob=TRUE)
irisClassification <- knn(irisTrain, irisTest, classInfoForTrain, knnk, l=0, prob=TRUE)
View(irisTrain)
View(irisTest)
iristTrain <- irisTrain[-5]
View(irisTrain)
View(iristTrain)
irisTest <- irisTest[-5]
View(irisTest)
delete.response(iristTrain)
delete(iristTrain)
remove(iristTrain)
irisClassification <- knn(irisTrain, irisTest, classInfoForTrain, knnk, l=0, prob=TRUE)
irisTrain <- irisTrain[-5]
irisClassification <- knn(irisTrain, irisTest, classInfoForTrain, knnk, l=0, prob=TRUE)
irisClassification
library(caret)
table(irisClassification)
irisTestVerify <- iris[irisTestIndices]
irisTestVerify <- iris[irisTestIndices,]
irisTestVerifyFactor <- factor(iris[irisTestIndices, "class"])
irisClassification
irisTestVerifyFactor
table(irisTestVerifyFactor)
table(table(irisClassification), table(irisTestVerifyFactor))
table(irisClassification)
table(irisTestVerifyFactor)
expected <- table(irisTestVerifyFactor)
observed <- table(irisClassification)
for(i in 1:ncol(observed)) {
print(names(observed[i]))
truePositive <- 0
if(observed[i] < expected[i])
truePositive <- observed[i]
else
truePositive <- expected[i]
trueNegative <- testDatasetSize - truePositive
falsePositive <- observed[i] - expected[i]
falseNegative <- (testDatasetSize - observed[i]) - trueNegative
sensetivity <- truePositive / expected[i]
specificity <- trueNegative / (testDatasetSize - observed[i])
accuracy <- (sensetivity * ((truePositive + falsePositive) / testDatasetSize)) + (specificity * ((trueNegative + falseNegative) / testDatasetSize))
print(accuracy)
}
ncol(observed)
nrow(observed)
for(i in 1:nrow(observed)) {
print(names(observed[i]))
truePositive <- 0
if(observed[i] < expected[i])
truePositive <- observed[i]
else
truePositive <- expected[i]
trueNegative <- testDatasetSize - truePositive
falsePositive <- observed[i] - expected[i]
falseNegative <- (testDatasetSize - observed[i]) - trueNegative
sensetivity <- truePositive / expected[i]
specificity <- trueNegative / (testDatasetSize - observed[i])
accuracy <- (sensetivity * ((truePositive + falsePositive) / testDatasetSize)) + (specificity * ((trueNegative + falseNegative) / testDatasetSize))
print(accuracy)
}
for(i in 1:nrow(observed)) {
#print(names(observed[i]))
truePositive <- 0
if(observed[i] < expected[i])
truePositive <- observed[i]
else
truePositive <- expected[i]
trueNegative <- testDatasetSize - truePositive
falsePositive <- observed[i] - expected[i]
falseNegative <- (testDatasetSize - observed[i]) - trueNegative
sensetivity <- truePositive / expected[i]
specificity <- trueNegative / (testDatasetSize - observed[i])
accuracy <- (sensetivity * ((truePositive + falsePositive) / testDatasetSize)) + (specificity * ((trueNegative + falseNegative) / testDatasetSize))
print(accuracy)
}
for(i in 1:nrow(observed)) {
#print(names(observed[i]))
truePositive <- 0
if(observed[i] < expected[i])
truePositive <- observed[i]
else
truePositive <- expected[i]
trueNegative <- (testDatasetSize - truePositive) - (expected[i] - observed[i])
falsePositive <- observed[i] - expected[i]
falseNegative <- (testDatasetSize - observed[i]) - trueNegative
sensetivity <- truePositive / expected[i]
specificity <- trueNegative / (testDatasetSize - observed[i])
accuracy <- (sensetivity * ((truePositive + falsePositive) / testDatasetSize)) + (specificity * ((trueNegative + falseNegative) / testDatasetSize))
print(accuracy)
}
setwd("D:/dwdm042/2310")
View(iris)
irisCl <- iris[-5]
kMeansCluster <- kmeans(irisCl, centers = c(1,51,101))
clusterCenters <- irisCl[1,51,101]
irisCl <- iris[-5]
clusterCenters <- irisCl[1,51,101]
clusterCenters <- c(irisCl[1], irisCl[51], irisCl[101])
clusterCenters <- iris[row(iris) == 1 | row(iris) == 51 | row(iris) == 101]
iris[row(iris) == 1 & row(iris) == 51 & row(iris) == 101]
clusterCenters <- iris[row(iris) == 1 & row(iris) == 51 & row(iris) == 101]
clusterCenters <- iris[row(iris) == 1, row(iris) == 51, row(iris) == 101]
clusterCenters <- matrix(iris[row(iris) == 1 | row(iris) == 51 | row(iris) == 101], nrow = 3, ncol = 4)
View(clusterCenters)
kMeansCluster <- kmeans(irisCl, clusterCenters)
View(kMeansCluster)
plot(kMeansCluster)
ggplot(iris)
plot(iris)
smoothScatter(iris)
